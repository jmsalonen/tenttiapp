[{"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\index.js":"1","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\App.js":"2","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\reportWebVitals.js":"3","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Header.js":"4","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Users.js":"5","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Exam.js":"6","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Question.js":"7","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\QuestionEdit.js":"8","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\QuestionUser.js":"9","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\LogIn.js":"10","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Home.js":"11","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Register.js":"12","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Course.js":"13","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\CourseUser.js":"14","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\CourseEdit.js":"15","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Footer.js":"16","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Dropzone.js":"17"},{"size":500,"mtime":1611128279946,"results":"18","hashOfConfig":"19"},{"size":3205,"mtime":1611722091390,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":1174,"mtime":1611695694651,"results":"22","hashOfConfig":"19"},{"size":2274,"mtime":1609021106062,"results":"23","hashOfConfig":"19"},{"size":6085,"mtime":1611722392806,"results":"24","hashOfConfig":"19"},{"size":1178,"mtime":1611722791741,"results":"25","hashOfConfig":"19"},{"size":5500,"mtime":1611715898767,"results":"26","hashOfConfig":"19"},{"size":3848,"mtime":1611736783582,"results":"27","hashOfConfig":"19"},{"size":810,"mtime":1611606173444,"results":"28","hashOfConfig":"19"},{"size":1986,"mtime":1611697084703,"results":"29","hashOfConfig":"19"},{"size":1279,"mtime":1611606338079,"results":"30","hashOfConfig":"19"},{"size":1044,"mtime":1611720291531,"results":"31","hashOfConfig":"19"},{"size":3058,"mtime":1611737529748,"results":"32","hashOfConfig":"19"},{"size":2950,"mtime":1611622685921,"results":"33","hashOfConfig":"19"},{"size":417,"mtime":1610592434881,"results":"34","hashOfConfig":"19"},{"size":968,"mtime":1610893565862,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1uw66iz",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\index.js",[],["81","82"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\App.js",["83"],"import './App.css';\nimport { useEffect, useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport axios from 'axios'\n\n//import Users from './Users.js'\nimport Header from './Header.js'\nimport Exam from './Exam.js'\nimport LogIn from './LogIn.js'\nimport Home from './Home.js'\nimport Register from './Register.js'\nimport Course from './Course.js'\nimport Footer from './Footer.js'\n\nimport { IntlProvider } from \"react-intl\";\nimport messages_fi from \"./translations/fi.json\";\nimport messages_en from \"./translations/en.json\";\n\nconst messages = {\n  'fi': messages_fi,\n  'en': messages_en\n}\n\nconst App = () => {\n  const [token, setToken] = useState(localStorage.getItem('token'))\n  const [isLogged, setIsLogged] = useState(false)\n  const [profile, setProfile] = useState(JSON.parse(localStorage.getItem('profile')))\n  const [language, setLanguage] = useState('fi')\n  \n  const changeLanguage = () => {\n    language === 'en' ? setLanguage('fi') : setLanguage('en')\n  }\n\n  const getProfile = async () => {\n    await axios\n      .get(`http://localhost:3001/user/profile`, {\n        headers: {\n          'authorization': `${token}`\n        }\n      })\n      .then(response => {\n        setProfile(response.data)\n        localStorage.setItem('profile', JSON.stringify(response.data)) // -- \n    })\n  }\n\n  const logIn = async (userEmail, userPassword) => {\n    const data = {\n      email: userEmail,\n      password: userPassword\n    }\n    await axios\n      .post(`http://localhost:3001/login`, data)\n      .then(response => {\n        setToken(response.data.token)\n        localStorage.setItem('token', response.data.token)\n      })\n      .catch(() => {\n        console.log('Log in Error')\n      })\n  }\n\n  const register = async (userName, userEmail, userPassword, userType) => {\n    const data = {\n      name: userName,\n      email: userEmail,\n      password: userPassword,\n      usertype: userType\n    }\n    await axios.post(`http://localhost:3001/register`, data)\n  }\n\n  const logOut = async () => {\n    localStorage.removeItem('token')\n    localStorage.removeItem('profile') // -- \n    localStorage.removeItem('course')\n    localStorage.removeItem('exam')\n    setToken(null)\n    setProfile(null)\n    setIsLogged(false)\n  }\n\n  useEffect(() => {\n    if (token === null) {\n      setIsLogged(false)\n    }\n    else\n      setIsLogged(true)\n\n    if (isLogged) {\n      getProfile() \n    }\n  }, [token])\n\n  return (\n    <Router>\n      <IntlProvider locale='fi' messages={messages[language]}>\n        <Header token={token} logOut={logOut} changeLanguage={changeLanguage} />\n        <Switch>\n          <Route path=\"/course/:courseid/exam\">\n            <Exam token={token} profile={profile} />\n          </Route>\n          <Route path=\"/register\">\n            <Register register={register} />\n          </Route>\n          <Route path=\"/courses\">\n            <Course token={token} profile={profile} />\n          </Route>\n          <Route path=\"/\">\n            {isLogged ? <Home token={token} profile={profile} /> : <LogIn logIn={logIn} />}\n          </Route>\n        </Switch>\n        <Footer locale={language} />\n      </IntlProvider>\n    </Router>\n  )\n}\n\nexport default App;\n","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\reportWebVitals.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Header.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Users.js",[],["84","85"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Exam.js",["86","87","88"],"import { useEffect, useState } from 'react'\r\nimport { Button, TextField } from '@material-ui/core'\r\nimport axios from 'axios'\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  Redirect,\r\n  useParams\r\n} from \"react-router-dom\";\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\nimport Question from './Question.js'\r\n\r\n\r\nconst Exam = ({ token, profile }) => {\r\n  const { path, url } = useRouteMatch()\r\n  const [myToken, setMyToken] = useState(token)\r\n  const [myProfile, setMyProfile] = useState(profile)\r\n  const [exam, setExam] = useState([])\r\n  const [examId, setExamId] = useState()\r\n  const [refresh, setRefresh] = useState(false)\r\n  //const [courseId, setCourseId] = useState()\r\n  const { courseid } = useParams()\r\n\r\n  const getToken = async () => {\r\n    setMyToken(localStorage.getItem('token'))\r\n  }\r\n\r\n  const getProfile = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/user/profile`, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setMyProfile(response.data)\r\n    })\r\n  }\r\n\r\n  const getExam = async () => {\r\n    const data = {\r\n      user: myProfile.id,\r\n      course: courseid\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/user/course/exam`, data, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        if (response.data[0].id != null)\r\n          setExam(response.data)\r\n      })\r\n  }\r\n\r\n  const addExam = async () => {\r\n    const data = {\r\n      user: myProfile.id,\r\n      course: courseid\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/user/teacher/new/exam`, data, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setRefresh(!refresh)\r\n      })\r\n  }\r\n\r\n  const deleteExam = async () => {\r\n    const data = {\r\n      id: examId\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/user/teacher/delete/exam`, data, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setExamId(null)\r\n        setRefresh(!refresh)\r\n      })\r\n  }\r\n\r\n  const updateExam = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      name: value\r\n    }\r\n    await axios.put(`http://localhost:3001/user/teacher/update/exam/`, data, {\r\n      headers: {\r\n        'authorization': `${myToken}`\r\n      }\r\n    })\r\n    .then(response => {\r\n      setRefresh(!refresh)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!myToken)\r\n      getToken()\r\n    if (!myProfile)\r\n      getProfile()\r\n    getExam()\r\n  }, [myToken, myProfile, refresh])\r\n\r\n  useEffect(() => {\r\n    getExam()\r\n    console.log(\"exam.length\", exam.length)\r\n    console.log(\"exam.length\", exam.length)\r\n  }, [examId, courseid])\r\n\r\n  return (\r\n    <div className=\"Tenttilista\">\r\n      <div>\r\n        {exam.length > 0 \r\n          ? exam.map((item, index) =>  \r\n            <Button\r\n              //key={uuid()} \r\n              component={Link} \r\n              to={`${url}/${item.id}`}\r\n              onClick={() => (setExamId(item.id))}\r\n              color=\"primary\">\r\n                {(myProfile.usertype === 'teacher' && exam.length > 0)\r\n                ? <TextField \r\n                    defaultValue={item.name}\r\n                    style={ {width: '90%'} }\r\n                    onBlur={ (e) => updateExam(item.id, e.target.value) } \r\n                  /> \r\n                : item.name}\r\n            </Button>) \r\n          : \"\"}\r\n        {myProfile.usertype === \"teacher\" ? <Button onClick={() => {addExam()}} color=\"primary\" > + </Button> : \"\"}\r\n      </div>\r\n      <Switch>\r\n        <Route exact path={path}>\r\n        </Route>\r\n        <Route path={`${path}/:examid`}> \r\n        {/* <Route path={`${path}/question`}> */}\r\n          <Question token={myToken} profile={myProfile} />\r\n        </Route>\r\n      </Switch>\r\n      {(myProfile.usertype === \"teacher\" && examId) \r\n      ? <div className=\"sulkuNappi\">\r\n          <Button component={Link} to={`${url}`} onClick={deleteExam} color=\"secondary\" > \r\n            <FormattedMessage id=\"exam.remove\" /> \r\n          </Button> \r\n        </div> \r\n      : \"\"}\r\n    </div>\r\n  )\r\n  \r\n\r\n/*   const { path, url } = useRouteMatch()\r\n  const [exam, setExam] = useState([])\r\n  const [examId, setExamId] = useState(0)\r\n  const [userType, setUserType] = useState(\"\")\r\n\r\n  const getUser = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/user/${userid}`)\r\n      .then(response => {\r\n        setUserType(response.data[0].usertype)\r\n      })\r\n  }\r\n\r\n  const getExam = async () => {\r\n    const data = {\r\n      user: userid,\r\n      course: courseid\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/course/exam`, data)\r\n      .then(response => {\r\n        setExam(response.data)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getUser()\r\n    getExam()\r\n  }, [])\r\n  \r\n  if (exam.length < 1)\r\n    return <> {\"\"} </>\r\n  if (exam.length > 0)\r\n    if (exam[0].id === null)\r\n      return <> {\"\"} </>\r\n    else \r\n      return (\r\n        <div className=\"Tenttilista\">\r\n          <div>\r\n            {exam.map(item => \r\n              <Button \r\n                key={uuid()} \r\n                component={Link} \r\n                // to={`${url}/${item.id}`}  \r\n                to={`${url}/question`}\r\n                onClick={() => setExamId(item.id)}\r\n                color=\"primary\">\r\n                  {item.name}\r\n              </Button>)}\r\n            {userType === \"teacher\" ? <div className=\"sulkuNappi\"><Button color=\"primary\" > + </Button> </div> : \"\"}\r\n          </div>\r\n          <Switch>\r\n            <Route exact path={path}>\r\n            </Route>\r\n            {// <Route path={`${path}/:examid`}> }\r\n            <Route path={`${path}/question`}>\r\n              <Question userid={userid} courseid={courseid} examid={examId}/>\r\n            </Route>\r\n          </Switch>\r\n          {userType === \"teacher\" ? <div className=\"sulkuNappi\"><Button color=\"secondary\" >Poista Tentti</Button> </div> : \"\"}\r\n        </div>\r\n      ) */\r\n}\r\n\r\nexport default Exam","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Question.js",["89"],"import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport QuestionEdit from './QuestionEdit.js'\r\nimport QuestionUser from './QuestionUser.js'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Question = ({ token, profile }) => {\r\n  const [myToken, setMyToken] = useState(token)\r\n  const [myProfile, setMyProfile] = useState(profile)\r\n//  const [examId, setExamId] = useState(examid)\r\n  const { examid } = useParams()\r\n\r\n\r\n  const getToken = async () => {\r\n    setMyToken(localStorage.getItem('token'))\r\n  }\r\n\r\n  const getProfile = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/user/profile`, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setMyProfile(response.data)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!myToken)\r\n      getToken()\r\n    if (!myProfile)\r\n      getProfile()\r\n  }, [myToken, myProfile])\r\n  \r\n  return (\r\n    myProfile.usertype === 'teacher' \r\n    ? <QuestionEdit token={myToken} profile={myProfile} /> \r\n    : <QuestionUser token={myToken} profile={myProfile} examid={examid} userid={myProfile.id} />\r\n  )\r\n}\r\n\r\nexport default Question","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\QuestionEdit.js",["90","91"],"import { useEffect, useState } from 'react'\r\nimport { Button, Card, TextField, Checkbox } from '@material-ui/core'\r\nimport { green } from '@material-ui/core/colors'\r\nimport axios from 'axios'\r\nimport {\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\"\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\nconst QuestionEdit = ({ token, profile }) => {\r\n\r\n  const [myToken, setMyToken] = useState(token)\r\n  const [myProfile, setMyProfile] = useState(profile)\r\n\r\n  useRouteMatch()\r\n  const { examid } = useParams()\r\n\r\n  const [question, setQuestion] = useState([]) \r\n  const [choice, setChoice] = useState([]) \r\n  const [refresh, setRefresh] = useState(false)\r\n\r\n  const getToken = async () => {\r\n    setMyToken(localStorage.getItem('token'))\r\n  }\r\n\r\n  const getProfile = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/user/profile`, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setMyProfile(response.data)\r\n    })\r\n  }\r\n\r\n  const getQuestion = async () => {\r\n    const data = {\r\n      id: examid\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/user/teacher/get/question`, data, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setQuestion(response.data)\r\n    })\r\n  }\r\n\r\n  const getChoice = async () => {\r\n    const data = {\r\n      id: examid\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/user/teacher/get/choice`, data, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setChoice(response.data)\r\n    })\r\n  }\r\n\r\n  const addQuestion = async () => {\r\n    const data = {\r\n      id: examid\r\n    } \r\n    await axios\r\n      .put(`http://localhost:3001/user/teacher/add/question/`, data, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setRefresh(!refresh)\r\n      })\r\n  }\r\n\r\n  const deleteQuestion = async (id) => {\r\n    const data = {\r\n      id: id\r\n    }\r\n    await axios.put(`http://localhost:3001/user/teacher/delete/question/`, data, {\r\n      headers: {\r\n        'authorization': `${myToken}`\r\n      }\r\n    })\r\n    .then(response => {\r\n      setRefresh(!refresh)\r\n    })\r\n  }\r\n\r\n  const addChoice = async (id) => {\r\n    const data = {\r\n      id: id\r\n    } \r\n    await axios\r\n      .put(`http://localhost:3001/user/teacher/add/choice/`, data, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setRefresh(!refresh)\r\n      })\r\n  }\r\n\r\n  const deleteChoice = async (id) => {\r\n    const data = {\r\n      id: id\r\n    }\r\n    await axios.put(`http://localhost:3001/user/teacher/delete/choice/`, data, {\r\n      headers: {\r\n        'authorization': `${myToken}`\r\n      }\r\n    })\r\n    .then(response => {\r\n      setRefresh(!refresh)\r\n    })  \r\n  }\r\n\r\n  const updateQuestion = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      name: value\r\n    }\r\n    await axios.put(`http://localhost:3001/user/teacher/update/question/`, data, {\r\n      headers: {\r\n        'authorization': `${myToken}`\r\n      }\r\n    })\r\n    .then(response => {\r\n      setRefresh(!refresh)\r\n    })  \r\n  }\r\n\r\n  const updateChoice = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      name: value\r\n    }\r\n    await axios.put(`http://localhost:3001/user/teacher/update/choice/`, data, {\r\n      headers: {\r\n        'authorization': `${myToken}`\r\n      }\r\n    })\r\n    .then(response => {\r\n      setRefresh(!refresh)\r\n    })\r\n  }\r\n\r\n  const updateCorrect = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      correct: value\r\n    }\r\n    await axios.put(`http://localhost:3001/user/teacher/update/correct/`, data, {\r\n      headers: {\r\n        'authorization': `${myToken}`\r\n      }\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getToken()\r\n    getProfile()\r\n    getQuestion()\r\n    getChoice()\r\n    console.log(examid)\r\n  }, [refresh, examid])\r\n\r\n  //console.log('question length: ', question.length)\r\n  \r\n  return (\r\n    <>\r\n      {question.map(q => \r\n        <Card className=\"kortti\"> \r\n          <div className=\"sulkuNappi\">\r\n            <Button onClick={() => deleteQuestion(q.id)} color=\"secondary\" >×</Button>\r\n          </div>\r\n          <TextField \r\n            defaultValue={q.question}\r\n            style={ {width: '90%'} }\r\n            onBlur={ (e) => updateQuestion(q.id, e.target.value) } \r\n          />\r\n          {choice.filter(filtered => (filtered.questionid === q.id && filtered.id !== null)).map(c => \r\n            <div> \r\n              <Checkbox\r\n                checked={c.correct}\r\n                style={{ color: green[500] }}\r\n                name={q.question + \" \" + q.id} \r\n                onChange={ (e) => updateCorrect(c.id, e.target.checked) } \r\n              />\r\n              <TextField \r\n                defaultValue={c.choice}\r\n                style={ {width: '50%'} } \r\n                onBlur={ (e) => updateChoice(c.id, e.target.value) } \r\n              />\r\n              <Button onClick={() => deleteChoice(c.id)} color=\"secondary\" >×</Button>\r\n            </div>\r\n          )}\r\n          <Button onClick={() => addChoice(q.id)} color=\"primary\" >+</Button>\r\n        </Card>\r\n      )}\r\n      <><Button onClick={addQuestion} color=\"primary\" > <FormattedMessage id=\"question.newquestion\" /> </Button></>\r\n    </>\r\n  )  \r\n} \r\n\r\nexport default QuestionEdit\r\n","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\QuestionUser.js",["92","93","94","95","96","97","98","99","100","101","102"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\LogIn.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Home.js",["103"],"import { useEffect, useState } from 'react'\r\nimport { Button, Card } from '@material-ui/core'\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios'\r\n\r\nconst Home = ({ token, profile }) => {\r\n  const [myToken, setMyToken] = useState(token)\r\n  const [myProfile, setMyProfile] = useState(profile)\r\n  const [course, setCourse] = useState([]) \r\n  \r\n  const getToken = async () => {\r\n    setMyToken(localStorage.getItem('token'))\r\n  }\r\n\r\n  const getProfile = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/user/profile`, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setMyProfile(response.data)\r\n        localStorage.setItem('profile', JSON.stringify(response.data))\r\n    })\r\n  }\r\n\r\n  const getCourse = async () => {\r\n    const data = {\r\n      id: myProfile.id\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/user/course`, data, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setCourse(response.data)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!myToken)\r\n      getToken()\r\n    if (!myProfile)\r\n      getProfile()\r\n    if (myProfile)\r\n      getCourse()\r\n  }, [myToken, myProfile])\r\n\r\n  const pickCourse = (courseId) => {\r\n    localStorage.setItem('course', courseId)\r\n    localStorage.removeItem('exam')\r\n    console.log('picked', courseId)\r\n  }\r\n\r\n  if (!myProfile)\r\n    return <></>\r\n  if (!myProfile.id)\r\n    return <></>\r\n  return (\r\n    <div className=\"Tenttilista\">\r\n      <Card className=\"kortti\">\r\n        <div>\r\n          {myProfile.id} | {myProfile.name} | {myProfile.email} | {myProfile.usertype} <br />\r\n        </div>\r\n        <div>\r\n        {course.map(item => <div>\r\n          <Button component={Link} to={`course/${item.id}/exam`} onClick={() => pickCourse(item.id)}> {item.name} </Button>\r\n        </div>)}\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Register.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Course.js",["104"],"import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport CourseEdit from './CourseEdit.js'\r\nimport CourseUser from './CourseUser.js'\r\n\r\nconst Course = ({ token, profile }) => {\r\n  const [myToken, setMyToken] = useState(token)\r\n  const [myProfile, setMyProfile] = useState(profile)\r\n\r\n  const getToken = async () => {\r\n    setMyToken(localStorage.getItem('token'))\r\n  }\r\n\r\n  const getProfile = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/user/profile`, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setMyProfile(response.data)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!myToken)\r\n      getToken()\r\n    if (!myProfile)\r\n      getProfile()\r\n  }, [myToken, myProfile])\r\n\r\n  if (myProfile === undefined)\r\n    return <></>\r\n\r\n  return (\r\n    myProfile.usertype === 'teacher' \r\n    ? <CourseEdit token={myToken} profile={myProfile} /> \r\n    : <CourseUser token={myToken} profile={myProfile} />\r\n  )\r\n}\r\n\r\nexport default Course\r\n","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\CourseUser.js",["105","106"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\CourseEdit.js",["107","108"],"import { useEffect, useState } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { Button, TextField, Card } from '@material-ui/core'\r\nimport axios from 'axios'\r\n\r\n/* LOKALISOI */\r\n\r\nconst CourseEdit = ({ token, profile }) => {\r\n  const [myToken, setMyToken] = useState(token)\r\n  const [myProfile, setMyProfile] = useState(profile)\r\n  const [course, setCourse] = useState([])\r\n  const [courseName, setCourseName] = useState('')\r\n  const [refresh, setRefresh] = useState(false)\r\n\r\n  const getToken = async () => {\r\n    setMyToken(localStorage.getItem('token'))\r\n  }\r\n\r\n  const getProfile = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/user/profile`, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setMyProfile(response.data)\r\n        localStorage.setItem('profile', JSON.stringify(response.data))\r\n    })\r\n  }\r\n\r\n  const getCourse = async () => {\r\n    const data = {\r\n      id: myProfile.id\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/user/course`, data, {\r\n        headers: {\r\n          'authorization': `${myToken}`\r\n        }\r\n      })\r\n      .then(response => {\r\n        setCourse(response.data)\r\n    })\r\n  }\r\n\r\n  const newCourse = async () => {\r\n    if (courseName.length < 1) \r\n      return\r\n    const data = {\r\n      id: profile.id,\r\n      name: courseName\r\n    }\r\n    await axios.put(`http://localhost:3001/user/teacher/new/course`, data, {\r\n      headers: {\r\n        'authorization': `${myToken}`\r\n      }\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const deleteCourse = async (courseId) => {\r\n    const data = {\r\n      id: courseId\r\n    }\r\n    console.log(courseId)\r\n    await axios.put(`http://localhost:3001/user/teacher/delete/course`, data, {\r\n      headers: {\r\n        'authorization': `${myToken}`\r\n      }\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  /* const getCourseData = async () => {\r\n    await getMyCourse()\r\n    await getOtherCourse()\r\n    setRefresh(!refresh)\r\n  } */\r\n  useEffect(() => {\r\n    if (!myToken)\r\n      getToken()\r\n    if (!myProfile)\r\n      getProfile()\r\n    if (myProfile) \r\n      getCourse()\r\n  }, [myToken, myProfile, refresh])\r\n\r\n  const pickCourse =   () => {\r\n    console.log(\"picked\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"Tenttilista\">\r\n      <Card className=\"kortti\">\r\n        {course.map(item => <div>\r\n          <Button onClick={pickCourse}> {item.name} </Button>\r\n          <Button onClick={() => deleteCourse(item.id)} color=\"secondary\" > × </Button>\r\n        </div>)}\r\n        <div>\r\n        <TextField \r\n          label={\"Kurssin Nimi\"}\r\n          style={ {width: '50%'} } \r\n          onChange={ (e) => setCourseName(e.target.value) } \r\n        />\r\n        </div>\r\n        <Button \r\n          onClick={() => {setRefresh(!refresh); newCourse()}} \r\n          color=\"primary\" >\r\n            Uusi Kurssi\r\n        </Button>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CourseEdit\r\n","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Footer.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Dropzone.js",["109"],"import React, {useCallback} from 'react'\r\nimport {useDropzone} from 'react-dropzone'\r\nimport axios from 'axios'\r\n\r\nconst Dropzone = () => {\r\n  const onDrop = useCallback(files => {\r\n    const config = { headers: { 'Content-Type': 'multipart/form-data' } };\r\n    let fd = new FormData();\r\n    let manyFiles = false\r\n    files.map((file, index) => {\r\n      fd.append('file', file)\r\n      if (index > 0)\r\n        manyFiles = true\r\n    });\r\n    manyFiles ? axios.post(`http://localhost:3001/upload-many`, fd, config)\r\n              : axios.post(`http://localhost:3001/upload-one`, fd, config)\r\n  }, []);\r\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\r\n\r\n  return (\r\n    <div {...getRootProps()}>\r\n      <input {...getInputProps()} />\r\n      {\r\n        isDragActive ?\r\n          <p>Drop the files here ...</p> :\r\n          <p>Drag 'n' drop some files here, or click to select files</p>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dropzone\r\n",["110","111"],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":97,"column":6,"nodeType":"118","endLine":97,"endColumn":13,"suggestions":"119"},{"ruleId":"112","replacedBy":"120"},{"ruleId":"114","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":9,"column":3,"nodeType":"124","messageId":"125","endLine":9,"endColumn":11},{"ruleId":"116","severity":1,"message":"126","line":113,"column":6,"nodeType":"118","endLine":113,"endColumn":35,"suggestions":"127"},{"ruleId":"116","severity":1,"message":"128","line":119,"column":6,"nodeType":"118","endLine":119,"endColumn":24,"suggestions":"129"},{"ruleId":"116","severity":1,"message":"130","line":36,"column":6,"nodeType":"118","endLine":36,"endColumn":26,"suggestions":"131"},{"ruleId":"122","severity":1,"message":"132","line":14,"column":10,"nodeType":"124","messageId":"125","endLine":14,"endColumn":19},{"ruleId":"116","severity":1,"message":"133","line":176,"column":6,"nodeType":"118","endLine":176,"endColumn":23,"suggestions":"134"},{"ruleId":"122","severity":1,"message":"135","line":2,"column":24,"nodeType":"124","messageId":"125","endLine":2,"endColumn":33},{"ruleId":"122","severity":1,"message":"136","line":6,"column":3,"nodeType":"124","messageId":"125","endLine":6,"endColumn":16},{"ruleId":"122","severity":1,"message":"137","line":7,"column":3,"nodeType":"124","messageId":"125","endLine":7,"endColumn":12},{"ruleId":"122","severity":1,"message":"138","line":13,"column":19,"nodeType":"124","messageId":"125","endLine":13,"endColumn":29},{"ruleId":"122","severity":1,"message":"132","line":14,"column":10,"nodeType":"124","messageId":"125","endLine":14,"endColumn":19},{"ruleId":"122","severity":1,"message":"139","line":14,"column":21,"nodeType":"124","messageId":"125","endLine":14,"endColumn":33},{"ruleId":"122","severity":1,"message":"140","line":19,"column":10,"nodeType":"124","messageId":"125","endLine":19,"endColumn":16},{"ruleId":"122","severity":1,"message":"141","line":19,"column":18,"nodeType":"124","messageId":"125","endLine":19,"endColumn":27},{"ruleId":"116","severity":1,"message":"142","line":105,"column":6,"nodeType":"118","endLine":105,"endColumn":23,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":121,"column":17,"nodeType":"146","endLine":121,"endColumn":35},{"ruleId":"144","severity":1,"message":"145","line":122,"column":17,"nodeType":"146","endLine":122,"endColumn":38},{"ruleId":"116","severity":1,"message":"147","line":50,"column":6,"nodeType":"118","endLine":50,"endColumn":26,"suggestions":"148"},{"ruleId":"116","severity":1,"message":"130","line":32,"column":6,"nodeType":"118","endLine":32,"endColumn":26,"suggestions":"149"},{"ruleId":"122","severity":1,"message":"150","line":13,"column":9,"nodeType":"124","messageId":"125","endLine":13,"endColumn":17},{"ruleId":"116","severity":1,"message":"151","line":96,"column":6,"nodeType":"118","endLine":96,"endColumn":8,"suggestions":"152"},{"ruleId":"122","severity":1,"message":"153","line":2,"column":8,"nodeType":"124","messageId":"125","endLine":2,"endColumn":12},{"ruleId":"116","severity":1,"message":"147","line":87,"column":6,"nodeType":"118","endLine":87,"endColumn":35,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":10,"column":29,"nodeType":"157","messageId":"158","endLine":10,"endColumn":31},{"ruleId":"112","replacedBy":"159"},{"ruleId":"114","replacedBy":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getProfile' and 'isLogged'. Either include them or remove the dependency array.","ArrayExpression",["163"],["161"],["162"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getExam' and 'getProfile'. Either include them or remove the dependency array.",["164"],"React Hook useEffect has missing dependencies: 'exam.length' and 'getExam'. Either include them or remove the dependency array.",["165"],"React Hook useEffect has a missing dependency: 'getProfile'. Either include it or remove the dependency array.",["166"],"'myProfile' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getChoice', 'getProfile', and 'getQuestion'. Either include them or remove the dependency array.",["167"],"'TextField' is defined but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","'setMyToken' is assigned a value but never used.","'setMyProfile' is assigned a value but never used.","'answer' is assigned a value but never used.","'setAnswer' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'choice', 'getChoice', and 'getQuestion'. Either include them or remove the dependency array.",["168"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has missing dependencies: 'getCourse' and 'getProfile'. Either include them or remove the dependency array.",["169"],["170"],"'getToken' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getCourse' and 'getOtherCourse'. Either include them or remove the dependency array.",["171"],"'uuid' is defined but never used.",["172"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["161"],["162"],"no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"179","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},"Update the dependencies array to be: [getProfile, isLogged, token]",{"range":"192","text":"193"},"Update the dependencies array to be: [myToken, myProfile, refresh, getProfile, getExam]",{"range":"194","text":"195"},"Update the dependencies array to be: [examId, courseid, getExam, exam.length]",{"range":"196","text":"197"},"Update the dependencies array to be: [myToken, myProfile, getProfile]",{"range":"198","text":"199"},"Update the dependencies array to be: [refresh, examid, getProfile, getQuestion, getChoice]",{"range":"200","text":"201"},"Update the dependencies array to be: [refresh, examid, getQuestion, getChoice, choice]",{"range":"202","text":"203"},"Update the dependencies array to be: [myToken, myProfile, getProfile, getCourse]",{"range":"204","text":"205"},{"range":"206","text":"199"},"Update the dependencies array to be: [getCourse, getOtherCourse]",{"range":"207","text":"208"},"Update the dependencies array to be: [myToken, myProfile, refresh, getProfile, getCourse]",{"range":"209","text":"210"},[2427,2434],"[getProfile, isLogged, token]",[2625,2654],"[myToken, myProfile, refresh, getProfile, getExam]",[2790,2808],"[examId, courseid, getExam, exam.length]",[908,928],"[myToken, myProfile, getProfile]",[4033,4050],"[refresh, examid, getProfile, getQuestion, getChoice]",[2601,2618],"[refresh, examid, getQuestion, getChoice, choice]",[1246,1266],"[myToken, myProfile, getProfile, getCourse]",[766,786],[2338,2340],"[getCourse, getOtherCourse]",[2148,2177],"[myToken, myProfile, refresh, getProfile, getCourse]"]