[{"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\index.js":"1","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\App.js":"2","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\reportWebVitals.js":"3","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Header.js":"4","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Users.js":"5","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Exam.js":"6","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Question.js":"7","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\QuestionEdit.js":"8","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\QuestionUser.js":"9","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\LogIn.js":"10","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Home.js":"11","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Register.js":"12","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Course.js":"13","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\CourseUser.js":"14","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\CourseEdit.js":"15"},{"size":500,"mtime":1609018316715,"results":"16","hashOfConfig":"17"},{"size":2237,"mtime":1609757965683,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":771,"mtime":1609750952673,"results":"20","hashOfConfig":"17"},{"size":2274,"mtime":1609021106062,"results":"21","hashOfConfig":"17"},{"size":3400,"mtime":1609757535891,"results":"22","hashOfConfig":"17"},{"size":741,"mtime":1609698728902,"results":"23","hashOfConfig":"17"},{"size":3613,"mtime":1608296396422,"results":"24","hashOfConfig":"17"},{"size":2738,"mtime":1608104035490,"results":"25","hashOfConfig":"17"},{"size":741,"mtime":1609750838096,"results":"26","hashOfConfig":"17"},{"size":1747,"mtime":1609757271158,"results":"27","hashOfConfig":"17"},{"size":1367,"mtime":1609751798533,"results":"28","hashOfConfig":"17"},{"size":1034,"mtime":1609749442925,"results":"29","hashOfConfig":"17"},{"size":1901,"mtime":1609750662635,"results":"30","hashOfConfig":"17"},{"size":2187,"mtime":1609730093759,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1uw66iz",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\index.js",[],["68","69"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\App.js",["70"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\reportWebVitals.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Header.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Users.js",[],["71","72"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Exam.js",["73","74","75","76","77","78","79","80","81","82"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Question.js",["83"],"import { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport QuestionEdit from './QuestionEdit.js'\r\nimport QuestionUser from './QuestionUser.js'\r\n\r\nconst Question = ({ userid, courseid, examid }) => {\r\n  const [userType, setUserType] = useState(\"\")\r\n\r\n  const getUser = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/user/${userid}`)\r\n      .then(response => {\r\n        setUserType(response.data[0].usertype)\r\n      })\r\n  }\r\n\r\n  useEffect(() => { \r\n    console.log(\"examid: \", examid)\r\n    getUser()\r\n  }, [])  \r\n\r\n  return (\r\n    userType === 'teacher' \r\n    ? <QuestionEdit examid={examid} userid={userid} /> \r\n    : <QuestionUser examid={examid} userid={userid} />\r\n  )\r\n}\r\n\r\nexport default Question","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\QuestionEdit.js",["84","85"],"import { useEffect, useState } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { Button, Card, TextField, Checkbox } from '@material-ui/core'\r\nimport { green } from '@material-ui/core/colors'\r\nimport axios from 'axios'\r\nimport {\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\nconst QuestionEdit = ({examid}) => {\r\n  useRouteMatch()\r\n  //const { examid } = useParams()\r\n\r\n  const [question, setQuestion] = useState([]) \r\n  const [choice, setChoice] = useState([]) \r\n  const [refresh, setRefresh] = useState(false)\r\n\r\n  const getQuestion = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/exam/${examid}/question`)\r\n      .then(response => {\r\n        setQuestion(response.data)\r\n    })\r\n  }\r\n\r\n  const getChoice = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/exam/${examid}/choice`)\r\n      .then(response => {\r\n        setChoice(response.data)\r\n    })\r\n  }\r\n\r\n  const deleteQuestion = async (id) => {\r\n    await axios.delete(`http://localhost:3001/delete/question/${id}`)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const deleteChoice = async (id) => {\r\n    await axios.delete(`http://localhost:3001/delete/choice/${id}`)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const postChoice = async (id) => {\r\n    await axios.post(`http://localhost:3001/add/choice/${id}`)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const postQuestion = async () => {\r\n    await axios.post(`http://localhost:3001/add/question/${examid}`)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const putQuestion = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      name: value\r\n    }\r\n    await axios.put(`http://localhost:3001/update/question/`, data)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const putChoice = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      name: value\r\n    }\r\n    await axios.put(`http://localhost:3001/update/choice/`, data)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const putCorrect = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      correct: value\r\n    }\r\n    await axios.put(`http://localhost:3001/update/correct/`, data)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getQuestion()\r\n    getChoice()\r\n  }, [refresh, examid])\r\n\r\n  return (\r\n    <>\r\n      {question.map(q => \r\n        <Card key={uuid()} className=\"kortti\"> \r\n          <div className=\"sulkuNappi\">\r\n            <Button onClick={() => deleteQuestion(q.id)} color=\"secondary\" >×</Button>\r\n          </div>\r\n          <TextField \r\n            defaultValue={q.question}\r\n            style={ {width: '90%'} }\r\n            onBlur={ (e) => putQuestion(q.id, e.target.value) } \r\n          />\r\n          {choice.filter(filtered => (filtered.questionid === q.id && filtered.id !== null)).map(c => \r\n            <div key={uuid()}>\r\n              <Checkbox\r\n                key={uuid()} \r\n                checked={c.correct}\r\n                style={{ color: green[500] }}\r\n                id={uuid()}\r\n                name={q.question + \" \" + q.id} \r\n                onChange={ (e) => putCorrect(c.id, e.target.checked) } \r\n              />\r\n              <TextField \r\n                defaultValue={c.choice}\r\n                style={ {width: '50%'} } \r\n                onBlur={ (e) => putChoice(c.id, e.target.value) } \r\n              />\r\n              <Button onClick={() => deleteChoice(c.id)} color=\"secondary\" >×</Button>\r\n            </div>\r\n          )}\r\n          <Button onClick={() => postChoice(q.id)} color=\"primary\" >+</Button>\r\n        </Card>\r\n      )}\r\n      <><Button onClick={postQuestion} color=\"primary\" >Uusi Kysymys</Button></>\r\n    </>\r\n  )\r\n} \r\n\r\nexport default QuestionEdit\r\n","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\QuestionUser.js",["86","87","88","89","90","91","92"],"import { useEffect, useState } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { Button, Card, TextField, Checkbox } from '@material-ui/core'\r\nimport { green } from '@material-ui/core/colors'\r\nimport axios from 'axios'\r\nimport {\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\nconst QuestionUser = ({examid, userid}) => {\r\n\r\n  const [question, setQuestion] = useState([]) \r\n  const [choice, setChoice] = useState([]) \r\n  const [finished, setFinished] = useState(false)\r\n  const [answer, setAnswer] = useState([])\r\n  const [refresh, setRefresh] = useState(false)\r\n  \r\n  const getQuestion = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/exam/${examid}/question`)\r\n      .then(response => {\r\n        setQuestion(response.data)\r\n    })\r\n  }\r\n\r\n  const getChoice = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/exam/${examid}/answer/${userid}`)\r\n      .then(response => {\r\n        setChoice(response.data)\r\n        //setFinished(response.data[0].finished)\r\n        //console.log(response.data[0])\r\n    })\r\n  }\r\n\r\n  const putAnswer = async (id, value) => {\r\n    const data = {\r\n      exam: examid,\r\n      user: userid,\r\n      choice: id,\r\n      value: value\r\n    }\r\n    await axios.put(`http://localhost:3001/update/answer/`, data)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const putFinished = async () => {\r\n    const data = {\r\n      exam: examid,\r\n      user: userid\r\n    }\r\n    await axios.put(`http://localhost:3001/finished/`, data)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getQuestion()\r\n    getChoice()\r\n  }, [refresh, examid])\r\n\r\n  return (\r\n    <>\r\n      {question.map(q => \r\n        <Card key={uuid()} className=\"kortti\"> \r\n          <div>\r\n            {q.question}\r\n            {/* // if finished then checkicon else blockicon */}\r\n          </div>\r\n          {choice.filter(filtered => (filtered.questionid === q.id && filtered.choiceid !== null)).map(c => \r\n            <div key={uuid()}>\r\n              <Checkbox\r\n                /* checked={c.answer}\r\n                disabled={ finished }\r\n                id={uuid()} */\r\n                /* onChange={ (e) => putCorrectChoice(c.choiceid, e.target.checked) }  */\r\n                checked={c.answer}\r\n                disabled={ finished }\r\n                onChange={ (e) => putAnswer(c.choiceid, e.target.checked) } \r\n              />\r\n              <Checkbox \r\n                style={{ color: green[500] }}\r\n                checked={c.correct}\r\n              /> \r\n              <label>{c.name}</label>\r\n            </div>\r\n          )}\r\n        </Card>\r\n      )}\r\n      <><Button onClick={putFinished} variant=\"contained\" color=\"primary\" > Valmis </Button></>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default QuestionUser\r\n","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\LogIn.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Home.js",["93"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Register.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Course.js",["94"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\CourseUser.js",["95","96","97"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\CourseEdit.js",["98","99","100"],"import { useEffect, useState } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { Button, TextField, Card } from '@material-ui/core'\r\nimport axios from 'axios'\r\n\r\nconst CourseEdit = ({ token, profile }) => {\r\n  const [myCourse, setMyCourse] = useState([])\r\n  const [otherCourse, setOtherCourse] = useState([])\r\n  const [courseName, setCourseName] = useState('')\r\n  const [refresh, setRefresh] = useState(false)\r\n\r\n\r\n  const getMyCourse = async () => {\r\n    const data = {\r\n      id: profile.id\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/mycourse`, data)\r\n      .then(response => {\r\n        setMyCourse(response.data)\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const getOtherCourse = async () => {\r\n    const data = {\r\n      id: profile.id\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/othercourse`, data)\r\n      .then(response => {\r\n        setOtherCourse(response.data)\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const newCourse = async () => {\r\n    const data = {\r\n      id: profile.id,\r\n      name: courseName\r\n    }\r\n    await axios.put(`http://localhost:3001/newcourse`, data)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const deleteCourse = async (courseId) => {\r\n    const data = {\r\n      id: courseId\r\n    }\r\n    console.log(courseId)\r\n    await axios.put(`http://localhost:3001/deletecourse`, data)\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getMyCourse()\r\n    getOtherCourse()\r\n  }, [refresh])\r\n\r\n  const pickCourse =   () => {\r\n    console.log(\"picked\")\r\n  }\r\n\r\n  return (\r\n    <div className=\"Tenttilista\">\r\n      <Card className=\"kortti\">\r\n        {myCourse.map(item => <div>\r\n          <Button onClick={pickCourse}> {item.name} </Button>\r\n          <Button onClick={() => deleteCourse(item.id)} color=\"secondary\" > × </Button>\r\n        </div>)}\r\n        <div>\r\n        <TextField \r\n          label={\"Kurssin Nimi\"}\r\n          style={ {width: '50%'} } \r\n          onChange={ (e) => setCourseName(e.target.value) } \r\n        />\r\n        </div>\r\n        <Button \r\n          onClick={newCourse} \r\n          color=\"primary\" >\r\n            Uusi Kurssi\r\n        </Button>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CourseEdit\r\n",{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":72,"column":6,"nodeType":"107","endLine":72,"endColumn":13,"suggestions":"108"},{"ruleId":"101","replacedBy":"109"},{"ruleId":"103","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":12},{"ruleId":"111","severity":1,"message":"115","line":3,"column":10,"nodeType":"113","messageId":"114","endLine":3,"endColumn":16},{"ruleId":"111","severity":1,"message":"116","line":6,"column":3,"nodeType":"113","messageId":"114","endLine":6,"endColumn":9},{"ruleId":"111","severity":1,"message":"117","line":7,"column":3,"nodeType":"113","messageId":"114","endLine":7,"endColumn":8},{"ruleId":"111","severity":1,"message":"118","line":8,"column":3,"nodeType":"113","messageId":"114","endLine":8,"endColumn":7},{"ruleId":"111","severity":1,"message":"119","line":9,"column":3,"nodeType":"113","messageId":"114","endLine":9,"endColumn":16},{"ruleId":"111","severity":1,"message":"120","line":12,"column":8,"nodeType":"113","messageId":"114","endLine":12,"endColumn":16},{"ruleId":"111","severity":1,"message":"121","line":18,"column":10,"nodeType":"113","messageId":"114","endLine":18,"endColumn":14},{"ruleId":"111","severity":1,"message":"122","line":49,"column":9,"nodeType":"113","messageId":"114","endLine":49,"endColumn":14},{"ruleId":"105","severity":1,"message":"123","line":61,"column":6,"nodeType":"107","endLine":61,"endColumn":26,"suggestions":"124"},{"ruleId":"105","severity":1,"message":"125","line":21,"column":6,"nodeType":"107","endLine":21,"endColumn":8,"suggestions":"126"},{"ruleId":"111","severity":1,"message":"127","line":8,"column":3,"nodeType":"113","messageId":"114","endLine":8,"endColumn":12},{"ruleId":"105","severity":1,"message":"128","line":85,"column":6,"nodeType":"107","endLine":85,"endColumn":23,"suggestions":"129"},{"ruleId":"111","severity":1,"message":"130","line":3,"column":24,"nodeType":"113","messageId":"114","endLine":3,"endColumn":33},{"ruleId":"111","severity":1,"message":"119","line":7,"column":3,"nodeType":"113","messageId":"114","endLine":7,"endColumn":16},{"ruleId":"111","severity":1,"message":"127","line":8,"column":3,"nodeType":"113","messageId":"114","endLine":8,"endColumn":12},{"ruleId":"111","severity":1,"message":"131","line":15,"column":20,"nodeType":"113","messageId":"114","endLine":15,"endColumn":31},{"ruleId":"111","severity":1,"message":"132","line":16,"column":10,"nodeType":"113","messageId":"114","endLine":16,"endColumn":16},{"ruleId":"111","severity":1,"message":"133","line":16,"column":18,"nodeType":"113","messageId":"114","endLine":16,"endColumn":27},{"ruleId":"105","severity":1,"message":"128","line":60,"column":6,"nodeType":"107","endLine":60,"endColumn":23,"suggestions":"134"},{"ruleId":"105","severity":1,"message":"135","line":45,"column":6,"nodeType":"107","endLine":45,"endColumn":26,"suggestions":"136"},{"ruleId":"105","severity":1,"message":"137","line":32,"column":6,"nodeType":"107","endLine":32,"endColumn":26,"suggestions":"138"},{"ruleId":"111","severity":1,"message":"112","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":12},{"ruleId":"111","severity":1,"message":"130","line":3,"column":18,"nodeType":"113","messageId":"114","endLine":3,"endColumn":27},{"ruleId":"105","severity":1,"message":"139","line":57,"column":6,"nodeType":"107","endLine":57,"endColumn":15,"suggestions":"140"},{"ruleId":"111","severity":1,"message":"112","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":12},{"ruleId":"111","severity":1,"message":"141","line":8,"column":10,"nodeType":"113","messageId":"114","endLine":8,"endColumn":21},{"ruleId":"105","severity":1,"message":"139","line":58,"column":6,"nodeType":"107","endLine":58,"endColumn":15,"suggestions":"142"},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getProfile' and 'isLogged'. Either include them or remove the dependency array.","ArrayExpression",["145"],["143"],["144"],"no-unused-vars","'uuid' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'useRouteMatch' is defined but never used.","'Question' is defined but never used.","'exam' is assigned a value but never used.","'setId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getExam', 'getProfile', 'profile', and 'token'. Either include them or remove the dependency array.",["146"],"React Hook useEffect has missing dependencies: 'examid' and 'getUser'. Either include them or remove the dependency array.",["147"],"'useParams' is defined but never used.","React Hook useEffect has missing dependencies: 'getChoice' and 'getQuestion'. Either include them or remove the dependency array.",["148"],"'TextField' is defined but never used.","'setFinished' is assigned a value but never used.","'answer' is assigned a value but never used.","'setAnswer' is assigned a value but never used.",["149"],"React Hook useEffect has missing dependencies: 'getMyCourse', 'getProfile', 'profile', and 'token'. Either include them or remove the dependency array.",["150"],"React Hook useEffect has missing dependencies: 'getProfile', 'profile', and 'token'. Either include them or remove the dependency array.",["151"],"React Hook useEffect has missing dependencies: 'getMyCourse' and 'getOtherCourse'. Either include them or remove the dependency array.",["152"],"'otherCourse' is assigned a value but never used.",["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"160","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"167","fix":"169"},"Update the dependencies array to be: [getProfile, isLogged, token]",{"range":"170","text":"171"},"Update the dependencies array to be: [myToken, myProfile, token, profile, getProfile, getExam]",{"range":"172","text":"173"},"Update the dependencies array to be: [examid, getUser]",{"range":"174","text":"175"},"Update the dependencies array to be: [refresh, examid, getQuestion, getChoice]",{"range":"176","text":"177"},{"range":"178","text":"177"},"Update the dependencies array to be: [myToken, myProfile, token, profile, getProfile, getMyCourse]",{"range":"179","text":"180"},"Update the dependencies array to be: [myToken, myProfile, token, profile, getProfile]",{"range":"181","text":"182"},"Update the dependencies array to be: [getMyCourse, getOtherCourse, refresh]",{"range":"183","text":"184"},{"range":"185","text":"184"},[1659,1666],"[getProfile, isLogged, token]",[1422,1442],"[myToken, myProfile, token, profile, getProfile, getExam]",[545,547],"[examid, getUser]",[2165,2182],"[refresh, examid, getQuestion, getChoice]",[1580,1597],[1086,1106],"[myToken, myProfile, token, profile, getProfile, getMyCourse]",[756,776],"[myToken, myProfile, token, profile, getProfile]",[1453,1462],"[getMyCourse, getOtherCourse, refresh]",[1435,1444]]