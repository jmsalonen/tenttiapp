[{"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\index.js":"1","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\App.js":"2","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\reportWebVitals.js":"3","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Header.js":"4","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Users.js":"5","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Exam.js":"6","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Question.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":824,"mtime":1607683776869,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":625,"mtime":1607060923400,"results":"12","hashOfConfig":"9"},{"size":1948,"mtime":1607677980401,"results":"13","hashOfConfig":"9"},{"size":1189,"mtime":1607639068317,"results":"14","hashOfConfig":"9"},{"size":4228,"mtime":1607679312894,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1uw66iz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\index.js",[],["34","35"],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\App.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\reportWebVitals.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Header.js",[],"C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Users.js",["36"],"import { useEffect, useState } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { Button, TextField, Card } from '@material-ui/core'\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from 'axios'\r\n\r\nconst Users = ({ chooseUser }) => {\r\n  const [users, setUsers] = useState([])\r\n  const [newUserName, setNewUserName] = useState()\r\n  const [newUserType, setNewUserType] = useState()\r\n  const [refresh, setRefresh] = useState(false)\r\n\r\n  const getUsers = async () => {\r\n    await axios\r\n      .get('http://localhost:3001/user/')\r\n      .then(response => {\r\n        setUsers(response.data)\r\n    })\r\n  }\r\n\r\n  const postUser = async () => {\r\n    await axios\r\n      .post(`http://localhost:3001/add/user/${newUserName}/${newUserType}`)\r\n      .then(response => {\r\n        console.log(\"user added\")\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const deleteUser = async (id) => {\r\n    await axios\r\n      .delete(`http://localhost:3001/delete/user/${id}`)\r\n      .then(response => {\r\n        console.log(\"choice deleted\")\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  useEffect(() => {    \r\n    getUsers()\r\n  }, [refresh])\r\n\r\n  const addUserBody = () => {\r\n    const data = {\r\n      name: newUserName,\r\n      usertype: newUserType\r\n    }\r\n    axios.post(`http://localhost:3001/add/user/`, data).then(response => {\r\n      console.log(\"user added\")\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div className=\"Tenttilista\">\r\n      <Card className=\"kortti\">\r\n        {users.map(item => <div key={uuid()}>\r\n          <Link to=\"/\" onClick={() => chooseUser(item.id)}>{item.name}</Link>\r\n          <Button onClick={() => deleteUser(item.id)}> × </Button>\r\n        </div>)}\r\n        <TextField label={'nimi'} onChange={(e) => setNewUserName(e.target.value)} />\r\n        <TextField label={'tyyppi'} onChange={(e) => setNewUserType(e.target.value)} /> <br /> \r\n        <Button onClick={postUser}>Lisää</Button>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Users","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Exam.js",["37","38","39"],"import { useEffect, useState } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { Button, Card } from '@material-ui/core'\r\nimport axios from 'axios'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\nimport Question from './Question.js'\r\n\r\n\r\nconst Exam = () => {\r\n  const { path, url } = useRouteMatch()\r\n  const [exam, setExam] = useState([])\r\n\r\n  const getExam = async () => {\r\n    axios\r\n      .get('http://localhost:3001/exam/')\r\n      .then(response => {\r\n        setExam(response.data)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getExam()\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"Tenttilista\">\r\n      <div>\r\n        {exam.map(item => <Button key={uuid()} component={Link} to={`${url}/${item.id}`} color=\"primary\">{item.name}</Button>)}\r\n        <Button color=\"primary\" >+</Button>\r\n      </div>\r\n      <Switch>\r\n        <Route exact path={path}>\r\n        </Route>\r\n        <Route path={`${path}/:examid`}>\r\n          <Question />\r\n        </Route>\r\n      </Switch>\r\n      <div className=\"sulkuNappi\"><Button color=\"secondary\" >Poista Tentti</Button> </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Exam","C:\\Users\\janma\\Projektit\\tenttiapp\\client\\src\\Question.js",["40"],"import { useEffect, useState } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { Button, Card, TextField, Checkbox } from '@material-ui/core'\r\nimport { green } from '@material-ui/core/colors'\r\nimport axios from 'axios'\r\nimport {\r\n  useRouteMatch,\r\n  useParams\r\n} from \"react-router-dom\";\r\n\r\nconst Question = () => {\r\n  useRouteMatch()\r\n  const { examid } = useParams()\r\n\r\n  const [question, setQuestion] = useState([]) // array of questions\r\n  const [choice, setChoice] = useState([]) // array of choices\r\n  const [refresh, setRefresh] = useState(false)\r\n\r\n  const getQuestion = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/exam/${examid}/question`)\r\n      .then(response => {\r\n        setQuestion(response.data)\r\n    })\r\n  }\r\n\r\n  const getChoice = async () => {\r\n    await axios\r\n      .get(`http://localhost:3001/exam/${examid}/choice`)\r\n      .then(response => {\r\n        setChoice(response.data)\r\n    })\r\n  }\r\n\r\n  const deleteQuestion = async (id) => {\r\n    await axios\r\n      .delete(`http://localhost:3001/delete/question/${id}`)\r\n      .then(response => {\r\n        console.log(\"question deleted\")\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const deleteChoice = async (id) => {\r\n    await axios\r\n      .delete(`http://localhost:3001/delete/choice/${id}`)\r\n      .then(response => {\r\n        console.log(\"choice deleted\")\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const postChoice = async (id) => {\r\n    await axios\r\n      .post(`http://localhost:3001/add/choice/${id}`)\r\n      .then(response => {\r\n        console.log(\"choice added\")\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const postQuestion = async () => {\r\n    await axios\r\n      .post(`http://localhost:3001/add/question/${examid}`)\r\n      .then(response => {\r\n        console.log(\"question added\")\r\n    })\r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const putQuestion = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      name: value\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/update/question/`, data)\r\n      .then(response => {\r\n        console.log(\"question updated\")\r\n    }) \r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const putChoice = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      name: value\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/update/choice/`, data)\r\n      .then(response => {\r\n        console.log(\"question updated\")\r\n    }) \r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  const putCorrectChoice = async (id, value) => {\r\n    const data = {\r\n      id: id,\r\n      correct: value\r\n    }\r\n    await axios\r\n      .put(`http://localhost:3001/update/correct/`, data)\r\n      .then(response => {\r\n        console.log(\"choice updated\")\r\n    }) \r\n    setRefresh(!refresh)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getQuestion()\r\n    getChoice()\r\n  }, [refresh, examid])\r\n\r\n  return (\r\n    <>\r\n      {question.map(q => \r\n        <Card key={uuid()} className=\"kortti\"> \r\n          <div className=\"sulkuNappi\">\r\n            <Button onClick={() => deleteQuestion(q.id)} color=\"secondary\" >×</Button>\r\n          </div>\r\n          <TextField \r\n            defaultValue={q.question}\r\n            style = { {width: '90%'} }\r\n            onBlur={ (e) => putQuestion(q.id, e.target.value) } \r\n          />\r\n          {choice.filter(filtered => (filtered.questionid === q.id && filtered.id !== null)).map(c => \r\n            <div key={uuid()}>\r\n              <Checkbox\r\n                key={uuid()} \r\n                checked={c.correct}\r\n                style={{ color: green[500] }}\r\n                id={uuid()}\r\n                name={q.question + \" \" + q.id} \r\n                onChange={ (e) => putCorrectChoice(c.id, e.target.checked) } \r\n              />\r\n              <TextField \r\n                defaultValue={c.choice}\r\n                style={ {width: '50%'} } \r\n                onBlur={ (e) => putChoice(c.id, e.target.value) } \r\n              />\r\n              <Button onClick={() => deleteChoice(c.id)} color=\"secondary\" >×</Button>\r\n            </div>\r\n          )}\r\n          <Button onClick={() => postChoice(q.id)} color=\"primary\" >+</Button>\r\n        </Card>\r\n      )}\r\n      <><Button onClick={postQuestion} color=\"primary\" >Uusi Kysymys</Button></>\r\n    </>\r\n  )\r\n} \r\n\r\nexport default Question",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":43,"column":9,"nodeType":"47","messageId":"48","endLine":43,"endColumn":20},{"ruleId":"45","severity":1,"message":"49","line":3,"column":18,"nodeType":"47","messageId":"48","endLine":3,"endColumn":22},{"ruleId":"45","severity":1,"message":"50","line":6,"column":20,"nodeType":"47","messageId":"48","endLine":6,"endColumn":26},{"ruleId":"45","severity":1,"message":"51","line":11,"column":3,"nodeType":"47","messageId":"48","endLine":11,"endColumn":12},{"ruleId":"52","severity":1,"message":"53","line":113,"column":6,"nodeType":"54","endLine":113,"endColumn":23,"suggestions":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'addUserBody' is assigned a value but never used.","Identifier","unusedVar","'Card' is defined but never used.","'Router' is defined but never used.","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getChoice' and 'getQuestion'. Either include them or remove the dependency array.","ArrayExpression",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [refresh, examid, getQuestion, getChoice]",{"range":"61","text":"62"},[2778,2795],"[refresh, examid, getQuestion, getChoice]"]